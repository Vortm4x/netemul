/*
	Сейчас на меленьком примере, рассмотрим создание небольшого скрипта.
Здесь будут применены не все команды, но их будет достаточно что бы
написать свой скрипт.

	Подрузамевается что читающий имеет знания ActonScript или более знакомого 
для всех JavaScript. Если вы не знакомы с этим языком, вы можете ознакомится с ним
в интернете. Язык обладает легким С подобным синтаксисом без строгой типизации и
довольно легок в изучении.

	Если здесь вы не найдете нужной вам функции, можете посмотреть в исходниках
программы. Все открытые слоты классов deviceImpl и myCanvas можно использовать в скриптах 
в соответсвующих для этого контекстах. Т.е. слоты myCanvas являются функциями самой сцены
с устройствами и их можно применять напрямую. Слоты deviceImpl применяются к конкретным 
устройствам. Например:

// Функция из класса myCanvas: 
myCanvas::emulateTime(); // Функция выполняется пока сеть нагружена работой и прекращается
// как только сеть начинает бездействовать.
в скрипте её можно писать просто:
emulateTime();

Напротив если мы создаем устройство:
var router = addRouter(5,5);
router.setIp("LAN10", "192.168.1.2"); // Функция вызывается именно у этого устройства

	В дальнейшем если сценарии будут развиваться, они будут делать это в сторону 
объектной парадигмы, а не процедурной.

	Итак рассмотрим создание небольшой сети и проверки её работоспособности.
Для начала проверим, а не открыта ли у нас другая сеть.
Свойство open сцены принимает булево значение и показывает открыта сцена или нет.
Если открыта мы её безмолвно закрываем( Ну что поделаешь это учебный скрипт и 
спрашивать сохранения нам сейчас не так важно.
*/
if ( open ) closeFile();
/*
Теперь откроем новый файл.
*/
newFile();
/*
Остановим симуляцию, теперь наша сцена стоит на паузе.
*/
stop();
/*
Для начала создадим массив коммутаторов. Конечно здесь можно было создать
два отдельных коммутатора, но что бы показать возможности я создал именно
массив.
*/
var sw = new Array();
/*
Функции сцены имеющие форму addX добавляют соответсвующий Х на сцену.
в данном случае это switch. Параметрами функция ожидает координаты
размещаемого устройства. 
*/
sw[0] = addSwitch(3,3);
sw[0].setSocketsCount(8);
/*
*/
sw[1] = addSwitch(7,3);
sw[1].setSocketsCount(8);
/*
*/
var r = addRouter(5,3);
r.router = true;
r.setSocketsCount(8);
/*
*/
addConnection(sw[0],r,"LAN8","LAN3");
addConnection(sw[1],r,"LAN8","LAN4");
/*
*/
var net = new Array();
var x = 1 , g = 126;
/*
*/
for ( j = 0 ; j < 2 ; j++ ) {
    net[j] = new Array();
/*
*/
    for ( i = 1 ; i <= 5 ; i++ ) {
        net[j][i-1] = addComputer(x,i);
        addConnection( net[j][i-1] , sw[j] , "eth0" , "LAN"+i );
/*
*/
	net[j][i-1].setIp("eth0","192.168.1."+( i + j*128) );
	net[j][i-1].setMask("eth0", "255.255.255.128");
	net[j][i-1].setGateway("192.168.1."+g);
    }
/*
*/
    r.setMask("LAN"+(j+3) , "255.255.255.128");
    r.setIp("LAN"+(j+3) , "192.168.1." + g );
/*
*/
    x += 8;
    g += 128;
}
/*
*/
net[0][0].sendMessage("192.168.1.133",50,0);
/*
*/
emulateTime();
/*
*/
play();
/*
*/
result = ( net[0][0].sendPacketCount("eth0") == net[1][4].receivePacketCount("eth0") );
/*
*/
saveScene("test/arp.net");
/*
*/
result;
/*
*/
